<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- 23/01/17  -->
<!-- mapper 태그 내에 namespace 속성 지정 후 Mapper 인터페이스 위치 지정 (오타 시 오류 안나니 주의) -->
<mapper namespace="com.itwillbs.mvc_board.mapper.MemberMapper">
	<!-- 실행할 SQL 구문(쿼리)을 태그 형식으로 작성 -->
	<!-- SQL 구문에서 사용하던 만능문자 파라미터 (?) 대신 #{파라미터명} 형태로 지정 -->
	
	<!-- 1. 회원 가입 작업 수행을 위한 insert 태그 작성 (기존 DAO에서 하던 작업)-->
	<!-- 아래의 항목이 MEMBERVO 클래스와 1:1로 매칭됨  -->
	<insert id="insertMember">
		INSERT 
			INTO member
			VALUES (
				#{name},
				#{id},
				#{passwd},
<!-- 				#{email}, -->
				<!-- 2. MySQL 문법 CONCAT() 함수 이용하여 데이터 결합 -->
				CONCAT(#{email1},'@', #{email2}),
				#{gender},
				now(),
				'N' 					
			)
	</insert> 
	
	<!-- 23/01/18 -->
	<!-- 2. 로그인 작업 수행을 위한 select 태그 작성 -->
	<!-- BCryptPasswordEncoder 객체 활용하여 로그인 수행 > 암호문으로 저장되어 있는
		패스워드 조회를 위한 select 구문 작성  -->
	<select id="selectPasswd" resultType="string">
		SELECT passwd
			FROM member
			WHERE id = #{id}
	</select>
	
	<!-- 3. 회원 상세정보 조회 수행을 위한 select 태그 -->
	<!-- 결과를 관리할 resultType은 1개 레코드 정보와 일치하는 vo타입 객체 사용하거나
	     키&값 형태로 관리할 Map 타입 지정할 수 있다! 
	     vo 타입 객체 지정 시 반드시 패키지명까지 포함해야 한다!! 
	     조회 성공 시 지정된 resultType 객체를 자동으로 생성하고 데이터 저장까지 수행하여 리턴-->
	<select id="selectMemberInfo" resultType="com.itwillbs.mvc_board.vo.MemberVO"> 
		SELECT name, id, email, gender, date
			FROM member
			WHERE id = #{id}
	</select>
	
	<!-- 4. 회원 목록 조회 수행을 위한 select 태그 -->
	<!-- 전체 데이터에 대한 resultType이 아닌 각 레코드에 대한 타입을 resultType으로 설정 
		- 1명의 회원 정보 > MemberVO 에 저장 -> 전체가 List 객체에 저장되므로
		  List 타입 객체의 제네릭 타입으로 사용되는 MemberVO 타입을 resultType으로 지정-->
	<select id="selectMemberList" resultType="com.itwillbs.mvc_board.vo.MemberVO">
		SELECT name, id, email, date  
			FROM member
	</select>
	
	
	<!-- 23/01/20 -->
	<!-- 5. 회원 정보 수정 작업 수행을 위한 update 태그 작성  -->
	<!-- resultType 작성하지 않으면 자동적으로 구문 실행한 int가 리턴됨 -->
	<!-- 
		아이디가 일치하는 레코들르 찾아 이름, 성별, 이메일, 새 패스워드로 수정
		단, Mapper interface에서 각 파라미터 변수명을 지정했으므로
		MemberVO 객체의 경우 member.파라미터명으로 접근한다
		
		https://mybatis.org/mybatis-3/ko/dynamic-sql.html
		동적 SQL 구문 실행
	 -->
<!-- 	<update id="updateMemberInfo"> -->
<!-- 		UPDATE member -->
<!-- 			SET  -->
<!-- 				name = #{member.name},  -->
<!-- 				gender = #{member.gender}, -->
<!-- 				email = CONCAT(#{member.email1},'@', #{member.email2}), -->
<!-- 				passwd = #{newPasswd} -->
<!-- 			WHERE  -->
<!-- 				id = #{member.id} -->
<!-- 	</update> -->

		<!--
		 5번의 회원정보수정 쿼리 > 동적 쿼리로 변경하여
		 새 패스워드 존재 여부에 따라 새 패스워드 변경 여부 결정
		 
		 newPasswd가 비어있지 않으면 변경, 반대의 경우 변경 X
		 => 단일 if문 : <if test = "조건식"> 실행할 쿼리 </if>
		 -->
		<update id="updateMemberInfo">
			UPDATE member
				SET 
					name = #{member.name} 
					,gender = #{member.gender}
					,email = CONCAT(#{member.email1},'@', #{member.email2})
					<if test='newPasswd neq null and newPasswd neq ""'>
						,passwd = #{newPasswd}
					</if>
				WHERE 
					id = #{member.id}
		</update>

		<!-- 23/01/20 -->
		<!-- 6.회원 정보 삭제 작업 -->
		<!-- 
			전달받은 파라미터가 복수개일 경우 @Param으로 지정한 이름
			단수개일 경우 그대로 id 사용하면 됨
		   -->
		<delete id="deleteMember">
			DELETE 
				FROM 
					member
				WHERE
					id = #{id}
		</delete>
		
</mapper>
