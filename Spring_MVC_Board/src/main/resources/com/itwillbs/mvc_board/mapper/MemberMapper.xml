<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- mapper 태그 내에 namespace 속성 지정 후 Mapper 인터페이스 위치 지정 -->
<mapper namespace="com.itwillbs.mvc_board.mapper.MemberMapper">
	<!-- 
	- 실행할 SQL 구문(쿼리)을 태그 형식으로 작성(CRUD 작업에 해당하는 태그 제공됨)
	- 각 태그 id 속성에 지정할 이름은 namespace 에서 지정한 인터페이스(XXXMapper.java) 내의
	  메서드명과 동일하게 지정해야함
	- 각 태그 사이에 실제 쿼리문을 작성
	- SQL 구문에서 사용하던 만능문자 파라미터(?)는 ? 기호 대신 #{파라미터명} 형태로 지정
	  (이 때, 파라미터명은 VO 객체에 선언된 멤버변수명 활용)
	- #{파라미터명} 과 ${파라미터명} 은 약간 다름 
	-->
	<!-- 
	1. 회원 가입 작업 수행을 위한 insert 태그 작성
	   - id 속성은 MemberMapper 객체의 메서드명 사용
	   - 구문 내의 데이터 부분에 사용되는 #{파라미터명} 부분은
	     Mapper 인터페이스에서 전달받은 데이터를 자동으로 인식함 
	     ex) MemberVO 타입 파라미터를 전달받아 멤버변수명 지정 시 자동으로 해당 객체의 변수 접근
	-->
	<insert id="insertMember">
		INSERT 
			INTO member
			VALUES (
				#{name}, <!-- MemberVO 객체의 name 멤버변수 값 활용 --> 
				#{id},
				#{passwd},
<!-- 				#{email}, -->
				<!-- MySQL 문법 중 CONCAT() 함수를 활용하여 데이터 결합 가능 -->
				CONCAT(#{email1}, '@', #{email2}),
				#{gender},
				now(),
				'N'		
			)
	</insert>
	
	<!-- 
	2. 로그인 작업 수행을 위한 select 태그 작성
	- BCryptPasswordEncoder 객체를 활용하여 로그인 수행 시
	  암호문으로 저장되어 있는 패스워드 조회를 위한 SELECT 구문 작성
	- 이 때, resultType 속성에 리턴할 데이터타입을 기술
	  (조회 결과 패스워드가 1개의 컬럼 문자열이므로 String(string) 타입으로 선언하거나
	   SELECT 결과를 통째로 저장할 MemberVO 타입 선언해도 된다!)
	- SELECT 구문에 사용될 조회 대상 아이디는 파라미터로 전달받은 변수명 id 그대로 사용
	  (단, 파라미터로 전달받는 변수가 2개 이상일 경우 별도의 조치 필요) 
	-->
	<select id="selectPasswd" resultType="string">
		SELECT passwd
			FROM member
			WHERE id = #{id}
	</select>
  
  	<!-- 
  	3. 회원 상세정보 조회 작업 수행을 위한 select 태그 작성
  	- 파라미터는 메서드에 전달된 파라미터 변수명(id)과 동일한 이름 사용
  	- 결과를 관리할 resultType 은 1개 레코드 정보와 일치하는 VO 타입 객체 사용하거나
  	  키&값 형태로 관리할 Map 타입 지정할 수 있다!
  	  => VO 타입 객체 지정 시 반드시 패키지명까지 포함해야한다!
  	- 조회 성공 시 지정된 resultType 객체를 자동으로 생성하고 데이터 저장까지 수행하여 리턴
  	-->
  	<select id="selectMemberInfo" resultType="com.itwillbs.mvc_board.vo.MemberVO">
  		SELECT name, id, email, gender, date
			FROM member
			WHERE id = #{id}
  	</select>
  	
  	<!-- 
  	4. 회원 목록 조회 작업 수행을 위한 select 태그 작성
  	- 전체 데이터에 대한 resultType 이 아닌 단일 레코드에 대한 타입을 resultType 으로 설정
	  (조회된 레코드가 복수개일 경우 자동으로 List<resultType명> 타입에 해당하는 객체 생성됨)
	- 1명의 회원 정보가 MemberVO 객체에 저장되고, 전체가 List 객체에 저장되므로
	  List 타입 객체의 제네릭 타입으로 사용되는 MemberVO 타입을 resultType 으로 지정
  	-->
  	<select id="selectMemberList" resultType="com.itwillbs.mvc_board.vo.MemberVO">
  		SELECT name, id, email, date
  			FROM member
  	</select>
  	
  	<!-- 
  	5. 회원 정보 수정 작업 수행을 위한 update 태그 작성
  	=> INSERT 작업과 동일
  	=> 아이디가 일치하는 레코드를 찾아 이름, 성별, 이메일, 새 패스워드로 수정
  	=> 단, Mapper 인터페이스에서 각 파라미터 변수명을 지정했으므로
  	   MemberVO 객체(member) 의 경우 member.파라미터명으로 접근해야한다!
  	-->
<!--   	<update id="updateMemberInfo"> -->
<!--   		UPDATE member -->
<!--   			SET -->
<!--   				name = #{member.name}, -->
<!--   				gender = #{member.gender}, -->
<!--   				email = CONCAT(#{member.email1}, '@', #{member.email2}), -->
<!--   				passwd = #{newPasswd} -->
<!--   			WHERE  -->
<!--   				id = #{member.id} -->
<!--   	</update> -->
	
	<!-- 
	5번의 회원정보수정 쿼리를 동적 쿼리로 변경하여 
	새 패스워드 존재 여부에 따라 새 패스워드 변경 여부 결정
	=> 단일 if문 : <if test="조건식">실행할 쿼리</if>
	-->
  	<update id="updateMemberInfo">
  		UPDATE member
  			SET
  				name = #{member.name}
  				,gender = #{member.gender}
  				,email = CONCAT(#{member.email1}, '@', #{member.email2})
  				<if test='newPasswd neq null and newPasswd neq ""'>
  					,passwd = #{newPasswd}
  				</if>
  			WHERE 
  				id = #{member.id}
  	</update>
  	
  	
  	<!-- 6. 회원 정보 삭제를 위한 delete 태그 작성 -->
  	<delete id="deleteMember">
  		DELETE
	  		FROM member
	  		WHERE id = #{id}
  	</delete>
</mapper>














