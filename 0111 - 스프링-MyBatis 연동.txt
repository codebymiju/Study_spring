[ MyBatis(마이바티스) ]
- JDBC 를 대체하는 SQL 매핑 프레임워크
- SQL 을 기반으로 DB 와 자바 등의 언어를 연결시켜주는 역할
- 소스 코드에서 SQL 문장을 분리하여 별도의 XML 파일로 작성한 후 소스 코드와 연결
  => SQL 구문 실행에 필요한 코드의 복잡한 구조를 단순화하는데 사용되는 프레임워크
- 원래 아파치 재단의 iBatis 에서 출발하여 구글에서 새로 개발한 프레임워크가 MyBatis
장점1) 자동 Connection 객체 close
장점2) 내부적으로 PreparedStatement 객체 사용한 처리(자동)
장점3) 리턴 타입 지정을 통해 자동으로 해당 타입의 객체 생성 및 ResultSet 객체 등에 대한 처리
장점4) 파라미터 지정을 통해 SQL 구문에서 사용할 데이터의 전달을 처리
==============================================================
[ MyBatis 를 활용한 데이터베이스 연동 애플리케이션 개발 과정 ]
< XML 파일 설정 >
1. pom.xml 파일에 필요 라이브러리 추가
<!-- MySQL - JDBC 연동에 필요한 라이브러리 추가 -->
		<!-- 1. 스프링에서 JDBC 연동에 필요한 기능 제공하는 spring-jdbc 라이브러리 -->
		<!-- 기존 스프링 버전(${org.springframework-version}) 그대로 사용 -->
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
		
		<!-- 2. MySQL-Connector 추가 -->
		<!-- https://mvnrepository.com/artifact/com.mysql/mysql-connector-j -->
		<dependency>
		    <groupId>com.mysql</groupId>
		    <artifactId>mysql-connector-j</artifactId>
		    <version>8.0.31</version>
		</dependency>
		
		<!-- 3. HikariCP 라이브러리 추가(Tomcat DBCP 대용으로 사용 가능한 커넥션 풀) -->
		<!-- Tomcat DBCP 에 비해 가볍고, 빠르고, 안정적인 처리가 가능한 라이브러리 -->
		<!-- mvnrepository.com 대신 https://github.com/brettwooldridge/HikariCP 링크 접속 후 -->
		<!-- artifacts 부분의 라이브러리 태그 복사해서 붙여넣기(Java 11+) -->
		<dependency>
		   <groupId>com.zaxxer</groupId>
		   <artifactId>HikariCP</artifactId>
		   <version>5.0.1</version>
		</dependency>		
		
		<!-- 4. MyBatis 활용에 필요한 라이브러리 추가 -->
		<!-- 4-1) MyBatis 기본 라이브러리 -->
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.5.11</version>
		</dependency>
					
		<!-- 4-2) MyBatis - Spring 연동 라이브러리 -->
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>3.0.1</version>
		</dependency>
---------------------------------------------------
2. root-context.xml 설정
- 파일 연 후 아래쪽 탭 중 Namespaces 탭 클릭하여 mybatis-spring 체크
- <beans> 태그 내에 아래와 같이 설정

<!-- Root Context: defines shared resources visible to all other web components -->
<!-- HikariCP 라이브러리 사용을 위한 설정 -->
<!-- 1. HikariCP 를 활용한 DB 접속 정보 설정을 위해 HikariConfig 객체 설정(JDBC 기본 설정) -->
<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
	<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/mvc_board3"></property>
	<property name="username" value="root"></property>
	<property name="password" value="1234"></property>
</bean>

<!-- 2. HikariCP 의 DataSource 객체 생성을 위해 HikariConfig 객체 전달 -->
<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
	<constructor-arg ref="hikariConfig"></constructor-arg>		
</bean>


<!-- Connection 객체 생성 및 쿼리 전달, 결과 리턴 등의 작업 수행할 SQLSessionFactory 객체 설정 -->
<!-- MyBatis - Spring 연결 담당하며, 내부적으로 SQLSession 객체를 통해 작업 수행 -->	
<!-- 주의! 이전에 이미 DataSource 객체 설정이 완료되어 있어야 함(ref="dataSource" 사용 위해) -->
<!-- 주의! configLocation, mapperLocations 항목을 위해 각각의 파일이 생성되어 있어야 함 -->
<!-- 각 xml 파일들은 src/main/resources 를 루트로 사용 -->
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"></property>
	<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
	<property name="mapperLocations" value="classpath:/com/itwillbs/mvc_board/mapper/*Mapper.xml"></property>
</bean>
=> 단, property 항목들 중 

<!-- MyBatis 연동에 사용될 객체들의 패키지 위치 지정(기본 루트 패키지 지정) -->
<mybatis-spring:scan base-package="com.itwillbs.mvc_board"/>
--------------------------------------------------------
3. servlet-context.xml 설정
<!-- 컨트롤러(@Controller) 를 비롯한 어노테이션을 통해 자동 주입될 클래스가 포함되는 패키지 지정 -->
<context:component-scan base-package="com.itwillbs.mvc_board" />
<context:component-scan base-package="com.itwillbs.mvc_board.controller" />
<context:component-scan base-package="com.itwillbs.mvc_board.service" />
---------------------------------------------------------
4. web.xml 설정
<!-- POST 방식 파라미터 한글 처리를 위한 필터 설정 -->
<filter>
	<filter-name>encodingFilter</filter-name>
	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	<init-param>
		<param-name>encoding</param-name>
		<param-value>UTF-8</param-value>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>encodingFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>
---------------------------------------------
< Mapper 정의 >
- SQL 구문 작성 및 처리 수행
- 인터페이스 + 어노테이션 사용 또는 XML Mapper 사용 방식으로 나뉨
  => 주로, XML Mapper 사용 방식으로 수업

1. vo 패키지에 XXXVO 클래스 정의
2. mapper 패키지에 XXXMapper 인터페이스 정의
3. src/main/resources - com.itwillbs.mvc_board.mapper 패키지 생성 및 XXXMapper.xml 파일 생성
   3-1. XML 파일 생성 시 상단 DTD 를 자동으로 정의하기 위한 방법(선택 사항)
         1) Preferences - XML - XML Catalog
         2) Add 버튼 클릭하여 첫번째 항목 추가
           Location : http://mybatis.org/dtd/mybatis-3-mapper.dtd
           Key : -//mybatis.org//DTD Mapper 3.0//EN
         3) Add 버튼 클릭하여 두번째 항목 추가
           Location : http://mybatis.org/dtd/mybatis-3-config.dtd
           Key : -//mybatis.org//DTD Config 3.0//EN
         4) User Specified Entries 항목에서 두 개의 DTD 항목 생성 확인
  3-2. XML 파일 생성 과정에서 파일명(XXXMapper.xml) 입력 후 Next
         Create file using a DTD - Select XML Catalog entry 선택 후 User Specified Entries 목록에서 
         mybatis-3-mapper.dtd 클릭 후 Next - Finish
  3-3. 생성한 XXXMapper.xml 파일의 <mapper> 태그 내의 namespace 속성 설정
        => XXXMapper 인터페이스 지정(패키지명 포함)
        ex) <mapper namespace="com.itwillbs.mvc_board.mapper.BoardMapper">
  3-4. <mapper> 태그 내부에 SQL 구문 실행을 위한 태그 설정
  3-5. src/main/resources/mybatis-config.xml 파일 생성(DTD 항목 중 mybatis-3-config.dtd 활용)
=====================================================================
[ 클래스 정의 ]
1. com.itwillbs.mvc_board.controller 패키지 : XXXController 클래스
2. com.itwillbs.mvc_board.service 패키지 : XXXService 클래스

[ 객체 자동 주입(DI = 의존 주입) 설정 ]
1. XXXController 클래스 : XXXService 객체 자동 주입 설정(@Inject or @Autowired 어노테이션 사용)
2. XXXService 클래스 : XXXMapper 객체 자동 주입 설정(@Inject or @Autowired 어노테이션 사용)

[ 작업 과정 ]
1. 컨트롤러에서 매핑 작업 수행(이 과정에서 Service 객체 자동 주입)
@Controller
public class XXXController {
	
	@Autowired
	private XXXService service;

	@GetMapping(value = "매핑할 주소") 또는 @PostMapping(value = "매핑할 주소")
	public String 메서드명([매개변수...]) {
	
		// Service 객체의 메서드 호출(리턴값이 있을 경우 리턴 받기)
		// 저장 데이터 있을 경우 Model 타입 파라미터 선언 및 addAttribute() 로 저장
		return "포워딩 할 경로"; // 단, Redirect 방식일 경우 "redirect:/포워딩 경로";

	}

}

2. 서비스에서 작업 요청
@Service
public class XXXService {

	@Autowired
	private XXXMapper mapper;

   	public 리턴타입 메서드명([매개변수 선언...]) throws Exception {
		// Mapper 객체의 메서드 호출(리턴값 있을 경우 리턴받기)
		return mapper.메서드명([전달인자...]); 
	 }
}



3. 매퍼에서 SQL 구문 실행
  3-1. XXXMapper 인터페이스에서 추상메서드 정의
  3-2. XXXMapper.xml 에서 태그로 SQL 구문 작성

[ MemberMapper.xml 예시 ]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- mapper 태그 내에 namespace 속성 지정 후 Mapper 인터페이스 위치 지정 -->
<mapper namespace="com.itwillbs.mvc_board.mapper.MemberMapper">
	<!-- 실행할 SQL 구문(쿼리)을 태그 형식으로 작성(CRUD 작업에 해당하는 태그가 제공됨) -->
	<!-- 태그의 id 속성에 지정할 이름은 namespace 에서 지정한 인터페이스 내의 메서드명과 동일해야함 -->
	<!-- 각 태그 사이에 실제 쿼리문을 작성 -->
	<!-- 만능문자 파라미터(?) 는 ? 기호 대신 #{파라미터명} 형태로 지정(VO 객체의 변수명 활용) -->
	
	<!-- 1. 회원 가입 작업을 수행하기 위한 insert 태그 작성(id 는 MemberMapper 객체의 메서드명 사용) -->
	<!-- 주의! 구문 내의 만능문자 사용 위치에 #{파라미터명} 지정 시 파라미터명은 VO 객체의 변수명과 동일 -->
	<insert id="insertMember">
		INSERT INTO member
		VALUES (
			null,
			#{name},
			#{id},
			#{passwd},
			#{email},
			#{gender},
			now(),
			'N'
		)
	</insert>
=> #{name}, #{id}, #{passwd}, #{email}, #{gender} 부분은 MemberMapper 인터페이스에서 파라미터로 전달받은
   MemberVO 객체의 멤버변수명과 동일해야하며, 자동으로 해당 부분의 데이터가 전달됨
=> insert, update, delete 태그를 통해 작업을 수행할 경우 영향을 받은 레코드 수가 자동으로 리턴되며
   리턴타입은 int 타입으로 자동 지정됨













